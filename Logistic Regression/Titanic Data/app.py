# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZtFkxCYxd6X1OM8ykSXBP5IMKZrIvD3e
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Load the data

titanic_data = pd.read_csv('train.csv')
print(len(titanic_data))

titanic_data.head(10)

titanic_data.columns

titanic_data.info()

titanic_data.dtypes

titanic_data.describe()

sns.countplot(x='Survived', data = titanic_data)

sns.countplot(x='Survived', data = titanic_data, hue = "Sex")

#Check for null

titanic_data.isna()

titanic_data.isna().sum()

#Visualize null values

sns.heatmap(titanic_data.isna())

# Find the % of null values in age column

(titanic_data['Age'].isna().sum()/len(titanic_data['Age']))*100

# Find the distribution for the age column

sns.displot(x='Age', data=titanic_data)

"""# Data Cleaning"""

#fill age column

mean = titanic_data['Age'].mean()
titanic_data['Age'].fillna(mean, inplace = True)

# Checking if the null places have been filled

titanic_data['Age'].isna().sum()

sns.heatmap(titanic_data.isna())

titanic_data.drop('Cabin', axis = 1, inplace = True)

titanic_data.head()

# Checking numeric and non numeric column

titanic_data.info()

# Convert sex column to numerical values. eg: male = 1 and female = 0

gender = pd.get_dummies(titanic_data['Sex'], drop_first = True) # For male it is 1

titanic_data['Gender'] = gender

# Checking Gender column is added or not

titanic_data.head()

# Dropping the columns that are not required

titanic_data.drop(['Name','Sex','Ticket','Embarked'], axis = 1, inplace = True)

titanic_data.head()

# Separate dependent and independent variables

x = titanic_data[["PassengerId", "Pclass", "Age","SibSp","Parch","Fare","Gender"]]
y = titanic_data['Survived']

print(x.shape)
print("x:\n",x)
print("y:\n ",y)

"""

# Data Modeling"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()

lr.fit(x_train, y_train)

#predict

predict = lr.predict(x_test)

"""## Test"""

from sklearn.metrics import confusion_matrix

pd.DataFrame(confusion_matrix(y_test, predict), columns=["Predicted No","Predicted Yes"], index=["Actual No","Actual Yes"])

from sklearn.metrics import classification_report

print(classification_report(y_test, predict))


