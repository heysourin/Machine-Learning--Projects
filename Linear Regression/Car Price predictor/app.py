# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VJewqaVnEOQk4uIYOyklJ8JNIAXg2yot
"""

import pandas as pd

car = pd.read_csv('quikr_car.csv')

car.head()

car.shape

car.info()



# Checking data quality:
car['year'].unique() #Year has many non-year values, also the year data type is an object. Let's fix

#Checking data quality of price:
car['Price'].unique() #contains non-price values and also the data type is an object

#Checking data quality in 'kms driven'
car['kms_driven'].unique() #it contains kms, also need to convert from object to int

#Checking data quality of fueltypes
car['fuel_type'].unique() #Contains some nan values

"""# Cleaning

"""

backup = car.copy() #faster

#Year cleaning
car = car[car['year'].str.isnumeric()]

car['year'] = car['year'].astype(int)

# Price cleaning
# car = car[car['year'].str.isnumeric()] # You can't do it here cz there are commas between the numbers so pyhton is not considering it as numerical-string, so what you do is
car = car[car['Price'] != "Ask For Price"]

#removing commas and converting to int64
car['Price'] = car['Price'].str.replace(',','').astype(int)

car['Price'].dtypes

#kms cleaning
car['kms_driven']

car['kms_driven'] = car['kms_driven'].str.split(' ').str.get(0).str.replace(',','') #string 1. split at first space --> 2. grab the first index --> 3. repalce commas

car = car[car['kms_driven'].str.isnumeric()]

car['kms_driven'] = car['kms_driven'].astype(int)

car.info()

#Cleaning fuel_type
car['fuel_type'].unique()

car = car[~car['fuel_type'].isna()]

car['fuel_type'].unique()

car.head()

#name cleaning: keeping the first 3 words only
car['name'] = car['name'].str.split(' ').str[0:3].str.join(' ')

car.head()

car = car.reset_index(drop= True) #drop= True --> dropping the old index

car.describe()

car[car['Price'] > 6e6]

# so we will drop this data
car = car[car['Price']<6e6]

car.reset_index(drop=True)

car.describe()

#Storing the cleaned data in a csv file
car.to_csv('clear_car.csv')

"""# Model"""

# extracting features and labels,(Price is the label)
X = car.drop(columns = 'Price') #All except price
y = car['Price']

"""A common split might be 70% training and 30% testing"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder

ohe = OneHotEncoder()
ohe.fit(X[['name','company','fuel_type']])
