# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WTLrv5vbY1YRyz6CCC3UlFjUeGdKfKig
"""

import numpy as np
import pandas as pd
import requests

df = pd.read_csv('/content/real_estate_properties.csv', index_col = 'Unnamed: 0')

df.shape

df.head()

import seaborn as sns
sns.countplot(data = df, x = df['Furnishing'])

df['Furnishing'].value_counts().plot(kind = 'pie', autopct = '%.2f')

import matplotlib.pyplot as plt
plt.figure(figsize=(25,5))
plt.hist(df['Price'], bins = 10)
plt.show()

df['Price']

def convert_cr_to_lac(value):
    if 'Cr' in value:
        numeric_part = float(value.replace('₹', '').replace(' Cr', ''))
        value_in_lac = numeric_part * 100
        return f'₹{value_in_lac:.2f} Lac'
    else:
        return value

df['Price_in_lakhs'] = df['Price'].apply(convert_cr_to_lac)
df['Price_in_lakhs']

df['Price_in_lakhs'] = df['Price_in_lakhs'].str.replace('₹', '').str.split(' ').str[0].astype(float)

df['Price_in_lakhs']

sns.distplot(df['Price_in_lakhs'])

df.head()

df['Price_in_lakhs'].max()

df['area_in_sqft'] = df['Area'].str.split(' ').str[0].astype(int)

df.head()

print(df['Price_in_lakhs'].min())
print(df['Price_in_lakhs'].max())
print(df['Price_in_lakhs'].mean())

print(df['area_in_sqft'].min())
print(df['area_in_sqft'].max())
print(df['area_in_sqft'].mean())

df['BHK'] = df['Name'].str.split(' ').str[0]

sns.scatterplot(x='Price_in_lakhs', y='area_in_sqft', data=df)

df.head()

df['BHK'].unique()

df['BHK'] = df[df['BHK'].str.len() == 1]['BHK'].astype(int)

df['BHK'].unique()

df.head()

sns.set(style="darkgrid")
sns.scatterplot(x='Price_in_lakhs', y='area_in_sqft', hue = 'BHK', style = 'Furnishing', data=df)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')

# plotting the same ('Furnished' not included )above using matplotlib

plt.scatter(df['Price_in_lakhs'], df['area_in_sqft'], c=df['BHK'], cmap='viridis')

# # Customize the plot as needed
plt.xlabel('Price_in_lakhs')
plt.ylabel('area_in_sqft')
plt.title('Scatter Plot of Price_in_lakhs vs. area_in_sqft')
plt.colorbar(label='BHK')

plt.show()

df.head()

df.isnull().sum()

df = df[~ df['Furnishing'].isna()]
df = df[~ df['Transaction'].isna()]
df = df[~ df['BHK'].isna()]

df.isnull().sum()

X = df.drop(columns=['Name','Price', 'Price_in_lakhs', 'Area'])
y = df['Price_in_lakhs']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline

ohe = OneHotEncoder()
ohe.fit(X[['Furnishing','Transaction','Status']])
column_trans = make_column_transformer((OneHotEncoder(categories = ohe.categories_),['Furnishing','Transaction','Status']),
                                       remainder = 'passthrough')

lr = LinearRegression()

pipe = make_pipeline(column_trans, lr)

pipe.fit(X_train, y_train)

y_pred = pipe.predict(X_test)
y_pred

r2_score(y_test, y_pred)

scores = []
for i in range(1000):
  X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = i)
  lr = LinearRegression()
  pipe = make_pipeline(column_trans, lr)
  pipe.fit(X_train, y_train)
  y_pred = pipe.predict(X_test)
  scores.append(r2_score(y_test,y_pred))
value_of_highest_index = np.argmax(scores) # index, where the highest value is

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = value_of_highest_index)

lr = LinearRegression()

pipe = make_pipeline(column_trans, lr)
pipe.fit(X_train, y_train)
y_pred = (pipe.predict(X_test))

y_pred

r2_score(y_test, y_pred)
